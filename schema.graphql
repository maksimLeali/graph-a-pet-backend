schema {
    query: Query
    mutation: Mutation
}

enum UserRole {
    USER,
    ADMIN
}

enum CustodyRole {
    SUB_OWNER,
    OWNER,
    PET_SITTER,
}

type User {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    role: UserRole!
    created_at: String!
    ownerships: [Ownership]!
}

type Pet {
    id: ID!
    name: String!
    race: !String
    ownerships: [Ownership]!
}

type Ownership {
    id: ID!
    user: User!
    pet: Pet!
}

input UserUpdate {
    first_name: String
    last_name: String
    created_at: String
    email: String
}

input UserCreate {
    first_name: String!
    last_name: String!
    email: String!
    password: String!
}

type UserResult {
    success: Boolean!
    errors: [String]
    user: User
}

type UsersResult {
    success: Boolean!
    errors: [String]
    users: [User]
}

type Query {
    listUsers: UsersResult!
    getUser(id: ID!): UserResult!
}


type Mutation {
    createUser(data: UserCreate!): UserResult!
    updateUser(id: ID!, data: UserUpdate!): UserResult!
}