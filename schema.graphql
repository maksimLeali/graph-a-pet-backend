schema {
    query: Query
    mutation: Mutation
}

type Query {
    listUsers(commonSearch: CommonSearch={}):PaginatedUsers!
    getUser(id: ID!): UserResult!
    listPets(commonSearch: CommonSearch={}): PaginatedPets!
    getPet(id: ID!): PetResult!
    me: UserResult!
    getOwnership(id: ID!): OwnershipResult!
    listOwnerships(commonSearch: CommonSearch= {}):PaginatedOwnerships!
    listHealthCards(commonSearch: CommonSearch= {}): PaginatedHealthCards!
    getHealthCard(id: ID!): HealthCardResult
    getTreatment(id: ID!): TreatmentResult
    listTreatments(commonSearch: CommonSearch = {}): PaginatedTreatments
}

type Mutation {
    createUser(data: UserCreate!): UserResult!
    signUp(data: UserCreate!): UserResult!
    updateUser(id: ID!, data: UserUpdate!): UserResult!
    updateMe( data: UserUpdate!): UserResult!
    createPet(data: PetCreate!): PetResult!
    updatePet(id: ID!, data: PetUpdate!): PetResult!
    updateOwnership(id: ID!, data: OwnershipUpdate!): OwnershipResult!
    login(email: String!, password: String!):NewTokenResult!
    logout: Boolean!
    addPet(pet: PetCreate!): PetResult!
    addPetToUser(pet: PetCreate!, userId: String!): PetAddedResult!
    addPetToMe(pet: PetCreate!, custodyLevel:CustodyLevel ): PetAddedResult!
    refreshToken: NewTokenResult!
    createHealthCard(data: HealthCardCreate!): HealthCardResult! 
    updateHealthCard(id: ID!, data:HealthCardUpdate!): HealthCardResult!
    createTreatment(data: TreatmentCreate!): TreatmentResult!
    updateTreatment(id: ID!, data: TreatmentUpdate!): TreatmentResult!
}

scalar Upload

enum UserRole {
    USER,
    ADMIN
}

enum CustodyLevel {
    SUB_OWNER,
    OWNER,
    PET_SITTER,
}

enum Gender {
    MALE,
    FEMALE,
    NOT_SAID
}

enum TreatmentType{
    VACCINE ,
    ANTIPARASITIC,
    TABLET,
    OPERATION,
    REMINDER,
}

enum CoatName {
    FUR,
    SCALES,
    FEATHERS,
    SKIN,
    SHED,
    COAT
}

enum FrequencyUnit {
    DAILY,
    WEEKLY,
    MONTHLY,
    YEARLY
}

enum PetFamily {
    REPTILE
    CANINE
    FELINE
    BIRDS
    FISH 
    }

enum CoatLength {
    SHORT,
    MEDIUM,
    LONG,
    HAIRLESS
}

enum CoatPattern{
    MERLE,
    BRINDLE,
    HARLEQUIN,
    TICKED,
    SPOTTED,
    ROAN,
    TRICOLOR,
    BICOLOR,
    SOLID,
    COLORPOINT
}
type Error{
    code: String!
    message: String!
    extra: String
}

"""
how a list is owganized by how many items has been found, in which page we are, the number of element per page and how many pages there are
"""
type Pagination{
    total_items: Int
    total_pages: Int
    current_page: Int
    page_size: Int
}

type User {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    role: UserRole!
    created_at: String!
    ownerships(commonSearch: CommonSearch = {}): PaginatedOwnerships!
}

type Coat {
    id: ID!
    name: String!
    length: CoatLength!
    colors: [String]!
    pattern: CoatPattern!
    texture: String!
}

type PetBody {
    id: ID!
    coat: Coat!
    image: Media!
    tags: [Tag]!
    family: PetFamily!
    breed: String!
}

type Tag {
    id: ID!
    text: String!
}

type Pet {
    id: ID!
    name: String!
    ownerships(commonSearch: CommonSearch= {}): PaginatedOwnerships
    body: PetBody!
    birthday: String!
    neutered: Boolean!
    gender: Gender!
    health_card: HealthCard
    chip_code: String
    weigth_kg: Float
    temperament: String
    diet: [String]
    intollerance: [String]
    disciplines: [String]
}

type Media {
    id: ID!
    src: String
    type: String!
}

type Ownership {
    id: ID!
    user: User!
    pet: Pet!
    custody_level: CustodyLevel!
}


type UserResult {
    success: Boolean!
    error: Error
    user: User
}

type UsersResult {
    success: Boolean!
    error: Error
    users: [User]!
}

type PaginatedUsers {
    success: Boolean
    error: Error
    items: [User]!
    pagination: Pagination!
}

type PaginatedOwnerships {
    success: Boolean
    error: Error
    items: [Ownership]!
    pagination: Pagination!
}

type PaginatedTreatments {
    success: Boolean
    error: Error
    items: [Treatment]!
    pagination: Pagination!
}

type PaginatedHealthCards {
    success: Boolean
    error: Error
    items: [HealthCard]!
    pagination: Pagination!
}

type NewTokenResult {
    success: Boolean!
    error: Error
    token: String
    user: User
}


type PetResult {
    success: Boolean!
    error: Error
    pet: Pet
    
} 

type PetsResult {
    success: Boolean!
    error: Error
    pets: [Pet]!
    
}

type PaginatedPets {
    success: Boolean!
    error: Error
    items: [Pet]!
    pagination: Pagination!
    
}

type OwnershipResult {
    success: Boolean!
    error: Error
    ownership: Ownership
    
}

type OwnershipsResult {
    success: Boolean!
    error: Error
    ownerships: [Ownership]!
    
}
type NewOwnership {
    pet: Pet!
    ownership: Ownership!
    
}

type PetAddedResult {
    success: Boolean!
    error: Error
    
    data: NewOwnership
}

type HealthCard {
    id: ID!
    pet: Pet!
    treatments(commonSearch: CommonSearch = {}): PaginatedTreatments!
    notes: [String]!
}

type HealthCardResult {
    health_card: HealthCard
    success: Boolean
    error: Error
}

type TreatmentResult {
    treatment: Treatment
    success: Boolean
    error: Error
}

type Treatment {
    id: ID! 
    created_at: String!
    type: TreatmentType!
    name: String!
    date: String!
    logs: [String]
    frequency_value: Int
    frequency_times: Int
    frequency_unit: FrequencyUnit
    booster: Treatment
    health_card: HealthCard
}

input FixedFilter {
    key: String!
    value: String!
}

input ListFilter {
    key: String,
    value: [String]!
}

input RangeFilterValue {
    min: String
    max: String
}

input RangeFilter {
    key: String!
    value: RangeFilterValue
}

input Join {
    key: String!
    value: DeepFilters!
}


input SearchFilter {
    value: String =""
    fields: [String] = []
}

input Filters {
    fixed: [FixedFilter] = []
    ranges: [RangeFilter] = []
    lists: [ListFilter] = []
    join: [Join] = []
    search: [SearchFilter]
}
input DeepFilters {
    and: DeepFilters,
    or: DeepFilters,
    not: DeepFilters,
    fixed: [FixedFilter] = []
    ranges: [RangeFilter] = []
    search: SearchFilter = {value: "", fields: []}
    lists: [ListFilter] = []
    join: [Join] = []
   
}



input CommonSearch {
    page: Int = 0
    page_size: Int = 20
    order_by: String = "created_at"
    order_direction: String = "desc"
    filters: DeepFilters = { fixed: [] , ranges: [], lists: [], join: [], and: [], or: [], not: []}
}

input PetBodyCreate {
    family: PetFamily!
    breed: String!
    coat: CoatCreate!
}

input PetBodyUpdate {
    family: PetFamily
    breed: String
    coat: CoatUpdate
}

input CoatUpdate{
    length: CoatLength
    colors: [String]
    pattern: CoatPattern
}

input CoatCreate{
    length: CoatLength!
    colors: [String]!
    pattern: CoatPattern!
}

input UserUpdate {
    first_name: String
    last_name: String
    email: String
}

input UserCreate {
    first_name: String!
    last_name: String!
    email: String!
    password: String!
}

input OwnershipUpdate {
    custody_level: CustodyLevel!
}

input PetUpdate {
    name: String
    body: PetBodyUpdate
    birthday: String
    neutered: Boolean
    gender: Gender
    chip_code: String
    weigth_kg: Float
    temperament: String
    diet: [String]
    intollerance: [String]
    disciplines: [String]
}

input PetCreate {
    name: String!
    body: PetBodyCreate!
    birthday: String!
    neutered: Boolean!
    gender: Gender!
    chip_code: String
    weigth_kg: Float
    temperament: String
    diet: [String]
    intollerance: [String]
    disciplines: [String]

}

input TreatmentCreate{
    health_card_id: ID!
    name: String!
    date: String!
    type: TreatmentType!
    logs: [String]
    booster_date: String
    frequency_times: Int
    frequency_value: Int
    frequency_unit: FrequencyUnit
}
input TreatmentUpdate{
    logs: [String]
    date: String
    name: String
    delete_old: Boolean
    booster_date: String
    type: TreatmentType
    frequency_times: Int
    frequency_value: Int
    frequency_unit: FrequencyUnit
}

input HealthCardCreate {
    pet_id: ID!
}

input HealthCardUpdate {
    notes: [String]!
}

fragment ListUser on User {
    id
    email
    last_name
    first_name
    ownerships{
        items{
            id
            custody_level
        }
    }
}