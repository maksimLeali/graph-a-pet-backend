schema {
    query: Query
    mutation: Mutation
}

type Query {
    listUsers(commonSearch: CommonSearch): UsersResult!
    getUser(id: ID!): UserResult!
    listPets(commonSearch: CommonSearch): UsersResult!
    getPet(id: ID!): PetResult!
    isAuthenticated(commonSearch: CommonSearch): Boolean!
    getOwnership(id: ID!): OwnershipResult!
    listOwnerships(commonSearch: CommonSearch): OwnershipsResult!
}

type Mutation {
    createUser(data: UserCreate!): UserResult!
    updateUser(id: ID!, data: UserUpdate!): UserResult!
    createPet(data: PetCreate!): PetResult!
    updatePet(id: ID!, data: PetUpdate!): PetResult!
    updateOwnership(id:ID!, data: OwnershipUpdate!): OwnershipResult!
    login(email: String!, password: String!):LoginResult!
    logout: Boolean!
    addPet(pet: PetCreate!): PetResult!
    addPetToUser(pet: PetCreate!, userId: String!): PetAddedResult!
}

input FixedFilter {
    key: String!
}

input ListFilter {
    key: [String]!
}

input RangeFilterValue {
    min: String
    max: String
}

input RangeFilter {
    key: RangeFilterValue
}

input Filters {
    fixeds: [FixedFilter]!
    ranges: [RangeFilter]!
    lists: [ListFilter]!
}


input CommonSearch {
    page: Int = 0
    page_size: Int = 20
    order_by: String = "created_at"
    order_direction: String = "desc"
    search: String = ""
    search_fieds: [String] = []
    filters: Filters
}

enum UserRole {
    USER,
    ADMIN
}

enum CustodyLevel {
    SUB_OWNER,
    OWNER,
    PET_SITTER,
}

enum CoatLength {
    SHORT,
    MEDIUM,
    LENGHT,
    HAIRLESS
}

enum CoatPattern{
    MERLE,
    BRINDLE,
    HARLEQUIN,
    TICKED,
    SPOTTED
    ROAN,
    TRICOLOR,
    BICOLOR,
    SOLID,
    COLORPOINT
}

type User {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    role: UserRole!
    created_at: String!
    ownerships: [Ownership]!
}

type Coat {
    id: ID!
    length: CoatLength!
    colors: [String]!
    pattern: CoatPattern!
}

type Pet {
    id: ID!
    name: String!
    race: String!
    ownerships: [Ownership]!
    coat: Coat!
    birthday: String!
    neutered: Boolean!

}

type Ownership {
    id: ID!
    user: User!
    pet: Pet!
    custody_level: CustodyLevel!
}

input CoatCreate{
    length: CoatLength!
    colors: [String]!
    pattern: CoatPattern!
}

input UserUpdate {
    first_name: String
    last_name: String
    email: String
}

input UserCreate {
    first_name: String!
    last_name: String!
    email: String!
    password: String!
}

input OwnershipUpdate {
    custody_level: CustodyLevel!
}

type UserResult {
    success: Boolean!
    errors: [String]
    user: User
}

type UsersResult {
    success: Boolean!
    errors: [String]
    users: [User]!
}

type LoginResult {
    success: Boolean!
    errors: [String]
    token: String!
}

input PetUpdate {
    name: String
    race: String
}

input PetCreate {
    name: String!
    race: String!
    coat: CoatCreate!
    birthday: String!
    neutered: Boolean!
}

type PetResult {
    success: Boolean!
    errors: [String]
    pet: Pet
}

type PetsResult {
    success: Boolean!
    errors: [String]
    pets: [Pet]!
}

type OwnershipResult {
    success: Boolean!
    errors: [String]
    ownership: Ownership
}

type OwnershipsResult {
    success: Boolean!
    errors: [String]
    ownerships: [Ownership]!
}
type NewOwnership {
    pet: Pet!
    ownership: Ownership!
}

type PetAddedResult {
    success: Boolean!
    errors: [String]
    data: NewOwnership!
}

